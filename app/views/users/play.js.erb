$("#master-modal").html("<%= escape_javascript(render 'play') %>");
$("#master-modal").modal("show");
// fuente: https://developer.mozilla.org/es/docs/Games/Workflows/Famoso_juego_2D_usando_JavaScript_puro/Create_the_Canvas_and_draw_on_it

var canvas = document.getElementById("myCanvas");

// The getContext() method returns an object that provides methods and properties for drawing on the canvas. the getContext("2d") object, which can be used to draw text, lines, boxes, circles, and more - on the canvas.
//ctx: It is a shorthand for the word "context"
var ctx = canvas.getContext("2d");

//definiremos un punto de inicio en la parte central inferior del lienzo en las variables llamadas x e y, a continuación, las utilizaremos para definir la posición en la que se dibuja el círculo.
var x = canvas.width/2;
var y = canvas.height-30;
// añadir un valor pequeño a "x" e "y" después de que cada fotograma se haya dibujado para que parezca que la pelota se está moviendo. Definamos estos valores pequeños como dx y dy, y establezcamos sus valores en 2 y -2 respectivamente
var dx = 2;
var dy = -2;

// Para facilitar los cálculos, definamos una variable llamada ballRadius que mantendrá el radio del círculo dibujado y se utilizará para los cálculos. Añade esto a tu código, en algún lugar por debajo de las declaraciones de variables existente
var ballRadius = 10;


// código para dibujar
function drawBall() {
    ctx.beginPath();
    ctx.arc(x, y, 10, 0, Math.PI*2);
    ctx.fillStyle = "#7e23a3";
    ctx.fill();
    ctx.closePath();
}

function draw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawBall();

    if(x + dx > canvas.width-ballRadius || x + dx < ballRadius) {
        dx = -dx;

    }
    if(y + dy > canvas.height-ballRadius || y + dy < ballRadius) {
        dy = -dy;
        
    }

    x += dx;
    y += dy;
}
//  La función draw() se ejecutará dentro de setInterval cada 10 milisegundos:
setInterval(draw, 10);





// OLD ONE
// The beginPath() method begins a path, or resets the current path.
// ctx.beginPath();
// // RECTANGULO
//     //El rectángulo se dibuja a 20 píxeles desde la izquierda de la pantalla y 40 píxeles desde la parte de arriba, y tiene 50 píxeles de ancho y 50 de alto, con lo que obtenemos un cuadrado perfecto.
//     ctx.rect(20, 40, 50, 50);
//     // La propiedad fillStyle guarda un color que utilizará el método fill() para pintar el cuadrado que, en nuestro caso, será rojo.
//     ctx.fillStyle = "#FF0000";
//     ctx.fill();
//     ctx.closePath();
//
//
// // CIRCULO VERDE
//     ctx.beginPath();
//     //  método arc(). Tiene seis parámetros:
//       // -las coordenadas x e y del centro del arco
//       // -el radio del arco
//       // -los ángulos inicial y final (en qué ángulo empezar y terminar de dibujar el círculo, en radianes)
//       // -la dirección hacia la que se dibujará (false para seguir el sentido de las agujas del reloj, que es el valor por defecto, o true para el sentido contrario). Este parámetro es opcional.
//     //       X    Y    r
//     ctx.arc(240, 160, 20, 0, Math.PI*2, false);
//     ctx.fillStyle = "green";
//     ctx.fill();
//     ctx.closePath();
// // RECTANGULO SÓLO PERIMETRO
// ctx.beginPath();
// ctx.rect(160, 10, 100, 40);
// ctx.strokeStyle = "rgba(0, 0, 255, 0.5)";
// ctx.stroke();
// ctx.closePath();
